var fragmentshader = [
	"#ifdef GL_ES",
	"precision highp float;",
	"#endif",
	
	"uniform sampler2D video;",
	"uniform vec2 resolution;",
	"uniform float time;",
	
	"uniform bool wobble;",
	"uniform float wobbleStrength;",
	"uniform float wobbleSpeed;",
	"uniform float wobbleSize;",
	
	"uniform bool invert;",
	
	"uniform bool sat;",
	"uniform float satStrength;",
	
	"uniform bool contrast;",
	"uniform float contrastStrength;",
	
	"uniform bool noise;",
	"uniform float noiseStrength;",
	
	"uniform bool lines;",
	"uniform float lineStrength;",
	"uniform float lineSize;",
	"uniform float lineTilt;",
	
	"uniform bool useMouse;",
	"uniform vec2 mouse;",
	
	"varying vec2 vUv;",
	
	simplexnoise,
	
	"void main(void)",
	"{",
		"vec2 p = -1.0 + 2.0 * gl_FragCoord.xy / resolution.xy;",
	
		"vec3 col;",
		"vec2 lenvec = mouse-p;",
		"float len = 0.0;",
		
		"if(useMouse)",
		"{",
			"len = clamp(length(lenvec)-0.2,0.0, 1.0);",
		"}",
		
		"if(wobble)",
		"{",
			"vec2 pp = p;",
			"float ws = wobbleStrength;",
			"if(useMouse)",
			"{",
				"ws = (1.0-len)*0.05;",
				"pp = lenvec;",
			"}",
			"col = texture2D(video, vUv + ws*vec2(cos(time*wobbleSpeed+length(pp*wobbleSize)), sin(time*wobbleSpeed+length(pp*wobbleSize)))).xyz;",
		"}",
		"else",
		"{",
			"col = texture2D(video, vUv).xyz;",
		"}",
		
		"if(invert)",
		"{",
			"col = (1.0-col)*(1.0-len)+col*len;",
		"}",
	
		"if(sat)",
		"{",
			"float ss = satStrength;",
			"if(useMouse)",
			"{",
				"ss = (1.0-len)*4.0;",
			"}",
			"float c = (col.x + col.y + col.z) / 3.0;",
			"col = col*ss+c*(1.0-ss);",
		"}",
		
		"if(contrast)",
		"{",
			"float cs = contrastStrength;",
			"if(useMouse)",
			"{",
				"cs = (1.0-len)*5.0-1.0;",
			"}",
			"col += (col - 0.5)*cs;",
		"}",
	
		"if(noise)",
		"{",
			"float ns = noiseStrength;",
			"if(useMouse)",
			"{",
				"ns = (1.0-len)*2.0;",
			"}",
			"col += (snoise((p+sin(time))*5000.0)-0.5)*ns;",
			
		"}",
		
		"if(lines)",
		"{",
			"float ls = lineStrength;",
			"if(useMouse)",
			"{",
				"ls = (1.0-len);",
			"}",
			"col += sin(p.x*lineSize*(1.0-lineTilt)+p.y*lineSize*lineTilt)*ls;",
		"}",
		"gl_FragColor = vec4(col,1.0);",
	"}",
].join('\n');